AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Audit system

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: none
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
    ConstraintDescription: Must be dev, build, staging, integration or production
  TestRoleArn:
    Type: String
    Description: The ARN of the role that will used for integration tests
    Default: none
    AllowedPattern: (none)|(arn:aws:iam::.*:role/.*)
  VpcStackName:
    Type: String
    Description: The name of the stack containing the VPC
    Default: none

Conditions:
  DevEnvironment: !Equals [!Ref Environment, dev]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UseTestRole: !Not [!Equals [!Ref TestRoleArn, none]]
  IsPagerDutyEnvironment:
    !Or [
      !Equals [!Ref Environment, staging],
      !Equals [!Ref Environment, production]
    ]
  IsProduction: !And
    - !Not [!Equals [!Ref Environment, dev]]
    - !Not [!Equals [!Ref Environment, build]]
    - !Not [!Equals [!Ref Environment, staging]]
  IsProductionOrStaging: !Or
    - !Equals [!Ref Environment, staging]
    - !Condition IsProduction
  IsPipelineTestStage: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, staging]
  IsTestableEnv: !Or
    - !Condition IsPipelineTestStage
    - !Equals [!Ref Environment, dev]
  DeployTestRolePolicy: !And
    - !Condition IsPipelineTestStage
    - !Condition UseTestRole
  DeployMessageBucketPolicy: !Or
    - !Condition DeployTestRolePolicy
    - !Condition IsProductionOrStaging

Globals:
  Function:
    Architectures:
      - arm64
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Runtime: nodejs18.x
    Timeout: 30
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId

Resources:
  #################################
  # Start: Audit Bucket resources #
  #################################

  # S3 resources
  MessageBatchBucket:
    DependsOn:
      - AuditFileReadyToEncryptQueuePolicy
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-message-batch
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-message-batch/
      LifecycleConfiguration:
        Rules:
          - Id: AuditGlacierRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
          - !If
            - IsProduction
            - Id: ProductionExpirationRule
              Status: Enabled
              ExpirationInDays: 2557
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
            - !Ref AWS::NoValue
          - !If
            - IsTestableEnv
            - Id: NonProductionExpirationRule
              Status: Enabled
              ExpirationInDays: 120
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
            - !Ref AWS::NoValue
          - Id: DeleteExpiredObjectMarkers
            Status: Enabled
            ExpiredObjectDeleteMarker: true
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt AuditFileReadyToEncryptQueue.Arn
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      MetricsConfigurations:
        - Id: EntireBucket

  MessageBatchBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployMessageBucketPolicy
    Properties:
      Bucket: !Ref MessageBatchBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Action:
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              - s3:DeleteBucket
              - s3:DeleteBucketPolicy
            Resource:
              - !GetAtt MessageBatchBucket.Arn
              - !Sub ${MessageBatchBucket.Arn}/*
            Principal:
              AWS: '*'
          - !If
            - DeployTestRolePolicy
            - Effect: Allow
              Resource:
                - !GetAtt MessageBatchBucket.Arn
                - !Sub ${MessageBatchBucket.Arn}/*
              Principal:
                AWS: !Ref TestRoleArn
              Action:
                - s3:GetObject
                - s3:ListBucket
            - !Ref AWS::NoValue
          - !If
            - IsProductionOrStaging
            - Effect: Allow
              Resource:
                - !GetAtt MessageBatchBucket.Arn
                - !Sub ${MessageBatchBucket.Arn}/*
              Principal:
                AWS: '{{resolve:ssm:CSLSS3LambdaARN}}'
              Action:
                - s3:Get*
                - s3:List*
            - !Ref AWS::NoValue

  TemporaryMessageBatchBucket:
    DependsOn:
      - AuditFileReadyToEncryptQueuePolicy
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-temporary-message-batch
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-temporary-message-batch/
      LifecycleConfiguration:
        Rules:
          - Id: AuditGlacierRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
          - Id: DeleteAutoTestObjects
            Status: Enabled
            ExpirationInDays: 1
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
            TagFilters:
              - Key: autoTest
                Value: true
          - !If
            - IsProduction
            - Id: ProductionExpirationRule
              Status: Enabled
              ExpirationInDays: 2557
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
            - !Ref AWS::NoValue
          - !If
            - IsTestableEnv
            - Id: NonProductionExpirationRule
              Status: Enabled
              ExpirationInDays: 120
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
            - !Ref AWS::NoValue
          - Id: DeleteExpiredObjectMarkers
            Status: Enabled
            ExpiredObjectDeleteMarker: true
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt AuditFileReadyToEncryptQueue.Arn
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      MetricsConfigurations:
        - Id: EntireBucket

  PermanentMessageBatchBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-permanent-message-batch
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-permanent-message-batch/
      LifecycleConfiguration:
        Rules:
          - Id: AuditGlacierRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
          - !If
            - IsProduction
            - Id: ProductionExpirationRule
              Status: Enabled
              ExpirationInDays: 2557
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
            - !Ref AWS::NoValue
          - !If
            - IsTestableEnv
            - Id: NonProductionExpirationRule
              Status: Enabled
              ExpirationInDays: 120
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
            - !Ref AWS::NoValue
          - Id: DeleteAutoTestObjects
            Status: Enabled
            ExpirationInDays: 1
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
            TagFilters:
              - Key: autoTest
                Value: true
          - Id: DeleteExpiredObjectMarkers
            Status: Enabled
            ExpiredObjectDeleteMarker: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      MetricsConfigurations:
        - Id: EntireBucket

  MessageBatchBucketTxMA2:
    Type: AWS::S3::Bucket
    Condition: IsTestableEnv
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-message-batch-txma2
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-message-batch-txma2/
      LifecycleConfiguration:
        Rules:
          - Id: AuditGlacierRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
          - Id: DeleteAutoTestObjects
            Status: Enabled
            ExpirationInDays: 1
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
            TagFilters:
              - Key: autoTest
                Value: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      MetricsConfigurations:
        - Id: EntireBucket

  ###############################
  # End: Audit Bucket resources #
  ###############################

  ###############################
  # Start: Encryption resources #
  ###############################

  # SQS resources
  AuditFileReadyToEncryptQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-audit-file-ready-to-encrypt-queue
      KmsMasterKeyId: '{{resolve:ssm:AuditFileReadyToEncryptQueueKmsKeyArn}}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AuditFileReadyToEncryptDeadLetterQueue.Arn
        maxReceiveCount: 5

  AuditFileReadyToEncryptDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-audit-file-ready-to-encrypt-DLQ
      KmsMasterKeyId: '{{resolve:ssm:AuditFileReadyToEncryptQueueKmsKeyArn}}'
      MessageRetentionPeriod: 1209600 # 14 days

  AuditFileReadyToEncryptQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AuditFileReadyToEncryptQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:*
            Resource:
              - !GetAtt AuditFileReadyToEncryptQueue.Arn
            Principal:
              Service:
                - s3.amazonaws.com
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-${Environment}-temporary-message-batch
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
          - Effect: Allow
            Action:
              - sqs:*
            Resource:
              - !GetAtt AuditFileReadyToEncryptQueue.Arn
            Principal:
              Service:
                - s3.amazonaws.com
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-${Environment}-message-batch
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  # Lambda resources
  S3CopyAndEncryptFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1536
      FunctionName: !Sub ${AWS::StackName}-s3-copy-and-encrypt
      Handler: s3CopyAndEncrypt.handler
      Role: !GetAtt S3CopyAndEncryptFunctionRole.Arn
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Environment:
        Variables:
          TEMPORARY_BUCKET_NAME: !Ref TemporaryMessageBatchBucket
          PERMANENT_BUCKET_NAME: !Ref PermanentMessageBatchBucket
          AUDIT_BUCKET_NAME: !Ref MessageBatchBucket
          GENERATOR_KEY_ID: '{{resolve:ssm:S3EncryptionGeneratorKmsKeyArn}}'
      Events:
        AuditFileReadyToEncryptEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AuditFileReadyToEncryptQueue.Arn
            BatchSize: 1
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

  S3CopyAndEncryptLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-s3-copy-and-encrypt
      RetentionInDays: 7

  S3CopyAndEncryptFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-s3-copy-and-encrypt-role
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaService
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref S3CopyAndEncryptPolicy

  S3CopyAndEncryptPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-s3-copy-and-encrypt-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: TemporaryS3Read
            Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !GetAtt TemporaryMessageBatchBucket.Arn
              - !Sub ${TemporaryMessageBatchBucket.Arn}/*
          - Sid: AuditS3Read
            Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !GetAtt MessageBatchBucket.Arn
              - !Sub ${MessageBatchBucket.Arn}/*
          - Sid: PermanentS3Write
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !GetAtt PermanentMessageBatchBucket.Arn
              - !Sub ${PermanentMessageBatchBucket.Arn}/*
          - Sid: UseSqsKmsKey
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - '{{resolve:ssm:AuditFileReadyToEncryptQueueKmsKeyArn}}'
          - Sid: SQSReceive
            Effect: Allow
            Action:
              - sqs:*
            Resource: !GetAtt AuditFileReadyToEncryptQueue.Arn
          - Sid: UseEncryptionGeneratorKmsKey
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt*
            Resource:
              - '{{resolve:ssm:S3EncryptionGeneratorKmsKeyArn}}'

  #############################
  # End: Encryption resources #
  #############################

  #####################################
  # Start: Audit data query resources #
  #####################################

  AuditEventTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: '{{resolve:ssm:AuditDataAnalysisGlueDatabaseName}}'
      TableInput:
        Description: Table to analyse event message raw data from the audit bucket
        Name:
          !Join [
            '',
            [
              !Join ['', !Split ['-', !Ref AWS::StackName]],
              !Sub '_${Environment}_message_batch_table'
            ]
          ]
        Parameters:
          has_encrypted_data: true
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: 2022/08/01/00,NOW
          projection.datetime.format: yyyy/MM/dd/HH
          projection.datetime.interval: 1
          projection.datetime.interval.unit: HOURS
          storage.location.template:
            !Join [
              '',
              ['s3://', !Ref MessageBatchBucket, '/firehose/${datetime}/']
            ]
        PartitionKeys:
          - Name: datetime
            Type: string
        StorageDescriptor:
          Columns:
            - Name: event_id
              Type: string
            - Name: client_id
              Type: string
            - Name: timestamp
              Type: bigint
            - Name: timestamp_formatted
              Type: string
            - Name: event_name
              Type: string
            - Name: component_id
              Type: string
            - Name: user
              Type: string
            - Name: platform
              Type: string
            - Name: restricted
              Type: string
            - Name: extensions
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${MessageBatchBucket}/firehose/
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              {
                'ignore.malformed.json': true,
                'serialization.format': 1,
                'field.delim': ''
              }
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: false
        TableType: EXTERNAL_TABLE

  ###################################
  # End: Audit data query resources #
  ###################################

  ##########################################
  # Start: Audit delivery stream resources #
  ##########################################

  # Lambda function resources
  AuditMessageDelimiterLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-audit-message-delimiter
      RetentionInDays: 7

  AuditMessageDelimiterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-audit-message-delimiter-role
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  AuditMessageDelimiterFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-audit-message-delimiter
      Handler: auditMessageDelimiter.handler
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      MemorySize: 256
      Role: !GetAtt AuditMessageDelimiterFunctionRole.Arn
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

  # Kinesis Firehose resources
  AuditMessageDelimiterDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-audit-message-delimiter-dlq
      KmsMasterKeyId: '{{resolve:ssm:S3QueueNotificationsKmsKeyArn}}'
      MessageRetentionPeriod: 1209600 # 14 days

  AuditMessageDelimiterDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3ToSendMessage
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt AuditMessageDelimiterDeadLetterQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-${Environment}-firehose-failure
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Queues:
        - !Ref AuditMessageDelimiterDeadLetterQueue

  AuditMessageFirehoseFailureBucket:
    DependsOn:
      - AuditMessageDelimiterDeadLetterQueuePolicy
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-firehose-failure
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules: !If
          - IsTestableEnv
          - - Id: ExpirationRule
              Status: Enabled
              ExpirationInDays: 30
              NoncurrentVersionExpiration:
                NoncurrentDays: 7
            - Id: DeleteExpiredObjectMarkers
              ExpiredObjectDeleteMarker: true
              Status: Enabled
            - Id: RemoveSuccessObjects
              ExpirationInDays: 1
              Prefix: success/
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 1
          - - Id: DeleteExpiredObjectMarkers
              ExpiredObjectDeleteMarker: true
              Status: Enabled
            - Id: RemoveSuccessObjects
              ExpirationInDays: 1
              Prefix: success/
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 1
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-firehose-failure/
      MetricsConfigurations:
        - Id: Failures
          Prefix: failures/
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: failures/
            Queue: !GetAtt AuditMessageDelimiterDeadLetterQueue.Arn
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AuditMessageDeliveryStreamLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/kinesisfirehose/${AWS::StackName}-message-batch
      RetentionInDays: 7

  AuditMessageDeliveryStreamDestinationLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref AuditMessageDeliveryStreamLogs
      LogStreamName: DestinationDelivery

  AuditMessageDeliveryStreamBackupLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref AuditMessageDeliveryStreamLogs
      LogStreamName: BackupDelivery

  AuditMessageDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${AWS::StackName}-message-batch
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: '{{resolve:ssm:FirehoseKmsKeyArn}}'
        KeyType: CUSTOMER_MANAGED_CMK
      ExtendedS3DestinationConfiguration:
        Prefix: firehose/
        BucketARN: !GetAtt MessageBatchBucket.Arn
        BufferingHints:
          IntervalInSeconds: !If
            - IsTestableEnv
            - 60
            - 900
          SizeInMBs: 128
        CompressionFormat: GZIP
        RoleARN: !GetAtt AuditMessageDeliveryStreamRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref AuditMessageDeliveryStreamLogs
          LogStreamName: !Ref AuditMessageDeliveryStreamDestinationLogStream
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt AuditMessageDelimiterFunction.Arn
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt AuditMessageDeliveryStreamRole.Arn
        S3BackupMode: Enabled
        S3BackupConfiguration:
          BucketARN: !GetAtt AuditMessageFirehoseFailureBucket.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 128
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Ref AuditMessageDeliveryStreamLogs
            LogStreamName: !Ref AuditMessageDeliveryStreamBackupLogStream
          CompressionFormat: GZIP
          ErrorOutputPrefix: failures/
          Prefix: success/
          RoleARN: !GetAtt AuditMessageDeliveryStreamRole.Arn

  AuditMessageDeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: '{{resolve:ssm:EventProcessorSnsTopicArn}}'
      Endpoint: !GetAtt AuditMessageDeliveryStream.Arn
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt AuditMessageDeliveryEventProcessingSnsSubscriptionRole.Arn

  AuditMessageDeliveryStreamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-message-batch-firehose-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !GetAtt MessageBatchBucket.Arn
              - !Sub ${MessageBatchBucket.Arn}/*
              - !GetAtt AuditMessageFirehoseFailureBucket.Arn
              - !Sub ${AuditMessageFirehoseFailureBucket.Arn}/*
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:GetFunctionConfiguration
            Resource:
              - !Sub ${AuditMessageDelimiterFunction.Arn}*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:CreateLogStream
            Resource:
              - !GetAtt AuditMessageDeliveryStreamLogs.Arn

  AuditMessageDeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-message-batch-firehose-role
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowFirehoseToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref AuditMessageDeliveryStreamPolicy

  AuditMessageDeliveryEventProcessingSnsSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-message-batch-sns-sub-role
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref AuditMessageDeliveryEventProcessingSnsSubscriptionPolicy

  AuditMessageDeliveryEventProcessingSnsSubscriptionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-message-batch-sns-sub-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - firehose:DescribeDeliveryStream
              - firehose:ListDeliveryStreams
              - firehose:ListTagsForDeliveryStream
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource:
              - !GetAtt AuditMessageDeliveryStream.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource: '{{resolve:ssm:EventProcessorSnsKmsKeyArn}}'

  ########################################
  # End: Audit delivery stream resources #
  ########################################

  #############################
  # Start: CSLS Subscriptions #
  #############################

  CslsAuditMessageDeliveryStreamLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName: !Ref AuditMessageDeliveryStreamLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  CslsAuditMessageDelimiterFunctionSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName: !Ref AuditMessageDelimiterLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  CslsS3CopyAndEncryptLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName: !Ref S3CopyAndEncryptLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  ###########################
  # End: CSLS Subscriptions #
  ###########################

  ##########################################
  # Start: Monitoring & alerting resources #
  ##########################################

  # CloudWatch Alarms
  AuditMessageFirehoseFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !ImportValue txma-alarms-slack-alerts-BuildNotificationTopicArn
      AlarmDescription: >-
        Monitor Audit Message Firehose failure bucket for new objects. 
        When objects land in this bucket, it indicates Audit events 
        have not been delivered to the Audit bucket.
      AlarmName: !Sub ${AWS::StackName}-audit-firehose-failure
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: BucketName
          Value: !Ref AuditMessageFirehoseFailureBucket
        - Name: FilterId
          Value: Failures
      EvaluationPeriods: 1
      MetricName: PutRequests
      Namespace: AWS/S3
      Period: 60
      Statistic: Sum
      Threshold: 0

  FailureToEncryptAuditMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !ImportValue txma-alarms-slack-alerts-BuildNotificationTopicArn
      AlarmDescription: >-
        Monitor the Ready To Encrypt DLQ for new messages. 
        When messages land in this queue, it indicates Audit events have 
        failed to encrypt.
      AlarmName: !Sub ${AWS::StackName}-failure-to-encrypt-audit-message
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AuditFileReadyToEncryptDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 60
      Threshold: 0

  NoAuditMessagesReceivedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - '{{resolve:ssm:CriticalAlarmSnsTopicArn}}'
      AlarmDescription: Audit S3 Received No Objects Alarm
      AlarmName: !Sub ${AWS::StackName}-no-audit-messages-received
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: BucketName
          Value: !Ref MessageBatchBucket
        - Name: FilterId
          Value: EntireBucket
      EvaluationPeriods: 1
      MetricName: PutRequests
      Namespace: AWS/S3
      Period: 43200
      Statistic: Sum
      Threshold: 0
      TreatMissingData: breaching

  # PagerDuty
  PagerDutySubscription:
    Type: AWS::SNS::Subscription
    Condition: IsPagerDutyEnvironment
    Properties:
      TopicArn: '{{resolve:ssm:CriticalAlarmSnsTopicArn}}'
      Protocol: https
      Endpoint: '{{resolve:secretsmanager:PagerDutyEndpoint}}'

  ########################################
  # End: Monitoring & alerting resources #
  ########################################

  ################################
  # Start: Development resources #
  ################################

  EmptyS3Buckets:
    Condition: DevEnvironment
    DependsOn:
      - MessageBatchBucket
      - TemporaryMessageBatchBucket
      - PermanentMessageBatchBucket
      - MessageBatchBucketTxMA2
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: '{{resolve:ssm:EmptyS3BucketsFunctionArn}}'

  ##############################
  # End: Development resources #
  ##############################
