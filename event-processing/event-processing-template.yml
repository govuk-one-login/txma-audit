AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "A template to create all the Event Processing infrastructure."

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  TestRoleArn:
    Type: "String"
    Description: "The ARN of the role that will used for integration tests"
    Default: "none"
    AllowedPattern: "(none)|(arn:aws:iam::.*:role/.*)"

Conditions:
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, "none" ] ]
  UseCodeSigning: !Not [ !Equals [ !Ref CodeSigningConfigArn, "none" ] ]
  UseTestRole: !Not [ !Equals [ !Ref TestRoleArn, "none" ]]
  IsProductionOrStaging: !And
    - !Not [!Equals [ !Ref Environment, dev]]
    - !Not [!Equals [ !Ref Environment, build]]
  IsBuildOrDev: !Or
    - !Equals [ !Ref Environment, dev ]
    - !Equals [ !Ref Environment, build ]
  IsPipelineTestStage: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
  DeployTestRolePolicy: !And
    - !Condition IsPipelineTestStage
    - !Condition UseTestRole

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Architectures:
      - x86_64

Resources:
  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource:
              - "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  LogKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LogKmsKey"
      TargetKeyId: !Ref LogsKmsKey

  SNSKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Effect: "Allow"
            Principal:
              AWS: "{{resolve:ssm:AuditAccountARN}}"
            Action:
              - 'kms:Decrypt'
            Resource: '*'

  SNSKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/SNSKMSKey"
      TargetKeyId: !Ref SNSKMSKey

  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'kms:Decrypt'
            Resource: '*'

  LambdaKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LambdaKMSKey"
      TargetKeyId: !Ref LambdaKMSKey

  epSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub
        - "EventProcessorSNSTopic-${EnvironmentName}"
        - EnvironmentName: !Ref Environment
      KmsMasterKeyId: !Ref SNSKMSKey

  SNSSubscribePolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSSubscribePolicy
        Version: 2012-10-17
        Statement:
          - Sid: SNSSubscribePolicy-1
            Effect: Allow
            Action:
              - 'sns:Subscribe'
            Principal:
              AWS:
                - "{{resolve:ssm:AuditAccountARN}}"
                - !Sub "${AWS::AccountId}"
            Resource: !Ref epSNSTopic
      Topics:
        - !Ref epSNSTopic

  SNSPublishPolicy:
    DependsOn:
      - epSNSTopic
      - KBVLambdaAccessRole
      - KBVAddressLambdaAccessRole
      - KBVFraudLambdaAccessRole
      - IPVLambdaAccessRole
      - IPVCILambdaAccessRole
      - IPVPassLambdaAccessRole
      - SPOTLambdaAccessRole
      - AppLambdaAccessRole
      - AuthOIDCLambdaAccessRole
      - AuthAccountMgmtLambdaAccessRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref KBVLambdaAccessRole
        - !Ref KBVAddressLambdaAccessRole
        - !Ref KBVFraudLambdaAccessRole
        - !Ref IPVLambdaAccessRole
        - !Ref IPVCILambdaAccessRole
        - !Ref IPVPassLambdaAccessRole
        - !Ref SPOTLambdaAccessRole
        - !Ref AppLambdaAccessRole
        - !Ref AuthOIDCLambdaAccessRole
        - !Ref AuthAccountMgmtLambdaAccessRole
      PolicyName: sns_publish_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sns:Publish'
            Resource: !Ref epSNSTopic
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource: !GetAtt SNSKMSKey.Arn

  KBVEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBV"
      RetentionInDays: 7

  KBVEventProcessorFunction:
    DependsOn:
      - KBVEventProcessorLogGroup
      - KBVLambdaAccessRole
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "EventProcessorFunction-KBV"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt KBVLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "KBV"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  KBVEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - KBVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields KBV"

  KBVEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - KBVEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-KBV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields KBV"
      Namespace: "lambda/di/txma/errors"

  KBVEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - KBVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors KBV"

  KBVEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - KBVEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-KBV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors KBV"
      Namespace: "lambda/di/txma/errors"

  KBVLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-KBV"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  KBVLambdaEventSourceMapping:
    DependsOn:
      - KBVEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:KBVQueueARN}}"
      FunctionName: !Ref KBVEventProcessorFunction

  KBVKMSPolicy:
    DependsOn:
      - KBVLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref KBVLambdaAccessRole
      PolicyName: kbv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:KbvKmsArn}}"

  KBVAddressEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVAddress"
      RetentionInDays: 7

  KBVAddressEventProcessorFunction:
    DependsOn:
      - KBVAddressEventProcessorLogGroup
      - KBVAddressLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-KBVAddress"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt KBVAddressLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "KBV-Address"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  KBVAddressEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - KBVAddressEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVAddress"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields KBV Address"

  KBVAddressEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - KBVAddressEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Address Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-KBVAddress"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields KBV Address"
      Namespace: "lambda/di/txma/errors"

  KBVAddressEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - KBVAddressEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVAddress"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors KBV Address"

  KBVAddressEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - KBVAddressEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-KBVAddress"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors KBV Address"
      Namespace: "lambda/di/txma/errors"

  KBVAddressLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-KBVAddress"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  KBVAddressLambdaEventSourceMapping:
    DependsOn:
      - KBVAddressEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:KBVAddressQueueARN}}"
      FunctionName: !Ref KBVAddressEventProcessorFunction

  KBVAddressKMSPolicy:
    DependsOn:
      - KBVAddressLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref KBVAddressLambdaAccessRole
      PolicyName: kbv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:KbvAddressKmsArn}}"

  KBVFraudEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVFraud"
      RetentionInDays: 7

  KBVFraudEventProcessorFunction:
    DependsOn:
      - KBVFraudEventProcessorLogGroup
      - KBVFraudLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-KBVFraud"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt KBVFraudLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "KBV-Fraud"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  KBVFraudEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - KBVFraudEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVFraud"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields KBV Fraud"

  KBVFraudEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - KBVFraudEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Fraud Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-KBVFraud"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields KBV Fraud"
      Namespace: "lambda/di/txma/errors"

  KBVFraudEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - KBVFraudEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVFraud"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors KBV Fraud"

  KBVFraudEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - KBVFraudEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Fraud Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-KBVFraud"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors KBV Fraud"
      Namespace: "lambda/di/txma/errors"

  KBVFraudLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-KBVFraud"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  KBVFraudLambdaEventSourceMapping:
    DependsOn:
      - KBVFraudEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:KBVFraudQueueARN}}"
      FunctionName: !Ref KBVFraudEventProcessorFunction

  KBVFraudKMSPolicy:
    DependsOn:
      - KBVFraudLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref KBVFraudLambdaAccessRole
      PolicyName: kbv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:KbvFraudKmsArn}}"

  IPVEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPV"
      RetentionInDays: 7

  IPVEventProcessorFunction:
    DependsOn:
      - IPVEventProcessorLogGroup
      - IPVLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-IPV"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt IPVLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "IPV"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts


  IPVEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - IPVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields IPV"

  IPVEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - IPVEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-IPV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields IPV"
      Namespace: "lambda/di/txma/errors"

  IPVEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - IPVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors IPV"

  IPVEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - IPVEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-IPV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors IPV"
      Namespace: "lambda/di/txma/errors"

  IPVLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-IPV"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  IPVCoreLambdaEventSourceMapping:
    DependsOn:
      - IPVEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:IPVCoreQueueARN}}"
      FunctionName: !Ref IPVEventProcessorFunction

  IPVKMSPolicy:
    DependsOn:
      - IPVLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref IPVLambdaAccessRole
      PolicyName: ipv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:IPVCoreKmsArn}}"

  IPVPassEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVPass"
      RetentionInDays: 7

  IPVPassEventProcessorFunction:
    DependsOn:
      - IPVPassEventProcessorLogGroup
      - IPVPassLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-IPVPass"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt IPVPassLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "IPV-Pass"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  IPVPassEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - IPVPassEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVPass"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields IPV Pass"

  IPVPassEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - IPVEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Passport Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-IPVPass"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields IPV Pass"
      Namespace: "lambda/di/txma/errors"

  IPVPassEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - IPVPassEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVPass"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors IPV Pass"

  IPVPassEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - IPVPassEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Passport Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-IPVPass"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors IPV Pass"
      Namespace: "lambda/di/txma/errors"

  IPVPassLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-IPVPass"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  IPVPassLambdaEventSourceMapping:
    DependsOn:
      - IPVPassEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:IPVPassportQueueARN}}"
      FunctionName: !Ref IPVPassEventProcessorFunction

  IPVPassKMSPolicy:
    DependsOn:
      - IPVPassLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref IPVPassLambdaAccessRole
      PolicyName: ipv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:IPVPassportKmsArn}}"

  IPVCIEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVCI"
      RetentionInDays: 7

  IPVCIEventProcessorFunction:
    DependsOn:
      - IPVCIEventProcessorLogGroup
      - IPVCILambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-IPVCI"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt IPVCILambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "IPV-CI"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  IPVCIEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - IPVCIEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVCI"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields IPV Contra Indicator"

  IPVCIEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - IPVEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Contra Indicator Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-IPVCI"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields IPV Contra Indicator"
      Namespace: "lambda/di/txma/errors"

  IPVCIEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - IPVCIEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVCI"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors IPV Contra Indicator"

  IPVCIEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - IPVCIEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Contra Indicator Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-IPVCI"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors IPV Contra Indicator"
      Namespace: "lambda/di/txma/errors"

  IPVCILambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-IPVCI"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  IPVCILambdaEventSourceMapping:
    DependsOn:
      - IPVCIEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:IPVCIQueueARN}}"
      FunctionName: !Ref IPVCIEventProcessorFunction

  IPVCIKMSPolicy:
    DependsOn:
      - IPVCILambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref IPVCILambdaAccessRole
      PolicyName: ipv_contra_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:IPVCIKmsArn}}"

  SPOTEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-SPOT"
      RetentionInDays: 7

  SPOTEventProcessorFunction:
    DependsOn:
      - SPOTEventProcessorLogGroup
      - SPOTLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-SPOT"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt SPOTLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "SPOT"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  SPOTEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - SPOTEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-SPOT"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields SPOT"

  SPOTEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - SPOTEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "SPOT Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-SPOT"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields SPOT"
      Namespace: "lambda/di/txma/errors"

  SPOTEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - SPOTEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-SPOT"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors SPOT"

  SPOTEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - SPOTEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "SPOT Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-SPOT"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors SPOT"
      Namespace: "lambda/di/txma/errors"

  SPOTLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-SPOT"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  SPOTLambdaEventSourceMapping:
    DependsOn:
      - SPOTEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:SPOTQueueArn}}"
      FunctionName: !Ref SPOTEventProcessorFunction

  SPOTKMSPolicy:
    DependsOn:
      - SPOTLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref SPOTLambdaAccessRole
      PolicyName: spot_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource: '{{resolve:ssm:SPOTKmsArn}}'

  AppEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-App"
      RetentionInDays: 7

  AppEventProcessorFunction:
    DependsOn:
      - AppEventProcessorLogGroup
      - AppLambdaAccessRole
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "EventProcessorFunction-App"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt AppLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "App"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  AppEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - AppEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-App"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields App"

  AppEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - AppEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "App Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-App"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields App"
      Namespace: "lambda/di/txma/errors"

  AppEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - AppEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-App"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors App"

  AppEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - AppEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "App Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-App"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors App"
      Namespace: "lambda/di/txma/errors"

  AppLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-App"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  AppLambdaEventSourceMapping:
    DependsOn:
      - AppEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:AppQueueArn}}"
      FunctionName: !Ref AppEventProcessorFunction

  AppKMSPolicy:
    DependsOn:
      - AppLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref AppLambdaAccessRole
      PolicyName: app_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:AppKmsArn}}"

  AuthOIDCEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-AuthOIDC"
      RetentionInDays: 7

  AuthOIDCEventProcessorFunction:
    DependsOn:
      - AuthOIDCEventProcessorLogGroup
      - AuthOIDCLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-AuthOIDC"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt AuthOIDCLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "AuthOIDC"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  AuthOIDCEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - AuthOIDCEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-AuthOIDC"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields AuthOIDC"

  AuthOIDCEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - AuthOIDCEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "AuthOIDC Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-AuthOIDC"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields AuthOIDC"
      Namespace: "lambda/di/txma/errors"

  AuthOIDCEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - AuthOIDCEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-AuthOIDC"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors AuthOIDC"

  AuthOIDCEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - AuthOIDCEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "AuthOIDC Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-AuthOIDC"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors AuthOIDC"
      Namespace: "lambda/di/txma/errors"

  AuthOIDCLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-AuthOIDC"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  AuthOIDCLambdaEventSourceMapping:
    DependsOn:
      - AuthOIDCEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:AuthOIDCQueueARN}}"
      FunctionName: !Ref AuthOIDCEventProcessorFunction

  AuthOIDCKMSPolicy:
    DependsOn:
      - AuthOIDCLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref AuthOIDCLambdaAccessRole
      PolicyName: auth_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:AuthOIDCKmsArn}}"

  AuthAccountMgmtEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-AuthAccountMgmt"
      RetentionInDays: 7

  AuthAccountMgmtEventProcessorFunction:
    DependsOn:
      - AuthAccountMgmtEventProcessorLogGroup
      - AuthAccountMgmtLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-AuthAccountMgmt"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: event-processor-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt AuthAccountMgmtLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
          defaultComponentId: "AuthAccountMgmt"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - event-processor-app.ts

  AuthAccountMgmtEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - AuthAccountMgmtEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-AuthAccountMgmt"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields Auth Account Management"

  AuthAccountMgmtEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - AuthAccountMgmtEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "AuthAccountMgmt Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-AuthAccountMgmt"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields Auth Account Management"
      Namespace: "lambda/di/txma/errors"

  AuthAccountMgmtEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - AuthAccountMgmtEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-AuthAccountMgmt"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors Auth Account Management"

  AuthAccountMgmtEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - AuthAccountMgmtEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Auth Account Management Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-AuthAccountMgmt"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors Auth Account Management"
      Namespace: "lambda/di/txma/errors"

  AuthAccountMgmtLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-AuthAccountMgmt"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  AuthAccountMgmtLambdaEventSourceMapping:
    DependsOn:
      - AuthAccountMgmtEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:AuthAccountMgmtQueueARN}}"
      FunctionName: !Ref AuthAccountMgmtEventProcessorFunction

  AuthAccountMgmtKMSPolicy:
    DependsOn:
      - AuthAccountMgmtLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref AuthAccountMgmtLambdaAccessRole
      PolicyName: auth_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:AuthAccountMgmtKmsArn}}"

  FireHoseKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "firehose.amazonaws.com"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource:
              - "*"
            Condition:
              ForAnyValue:ArnEquals:
                "aws:PrincipalArn":
                  - !GetAtt ObfuscationFunction.Arn
                  - !GetAtt CleanserFunction.Arn
                  - !GetAtt ReIngestFunction.Arn

  FireHoseKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/FireHoseKMSKey"
      TargetKeyId: !Ref FireHoseKMSKey

  SplunkDeliveryBucketLogsBucket:
    Type: AWS::S3::Bucket
    # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-splunk-bucket-logs"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  SplunkDeliveryBucketLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SplunkDeliveryBucketLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${SplunkDeliveryBucketLogsBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  FraudS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsProductionOrStaging
    Properties:
      Bucket: !Ref FraudSplunkDeliveryFailureBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Resource:
              - !GetAtt FraudSplunkDeliveryFailureBucket.Arn
              - !Sub '${FraudSplunkDeliveryFailureBucket.Arn}/*'
            Principal:
              AWS: "{{resolve:ssm:CSLSS3LambdaARN}}"
            Action:
              - 's3:Get*'
              - 's3:List*'

  FraudSplunkDeliveryFailureBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-fraud-splunk-fail"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/fraud-splunk-delivery-failure-bucket/"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRedundantFiles
            Status: Enabled
            ExpirationInDays: 7
      NotificationConfiguration:
        QueueConfigurations:
          !If
          - IsProductionOrStaging
          - - Event: "s3:ObjectCreated:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
            - Event: "s3:ObjectRestore:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
          - - !Ref AWS::NoValue
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  FraudSplunkDeliveryTestBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployTestRolePolicy
    Properties:
      Bucket: !Ref FraudSplunkDeliveryTestBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Resource:
              - !GetAtt FraudSplunkDeliveryTestBucket.Arn
              - !Sub '${FraudSplunkDeliveryTestBucket.Arn}/*'
            Principal:
              AWS: !Ref TestRoleArn
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:DeleteObject'

  FraudSplunkDeliveryTestBucket:
    Type: AWS::S3::Bucket
    Condition: IsBuildOrDev
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-fraud-splunk-test"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/fraud-splunk-delivery-test-bucket/"

  PerformanceS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsProductionOrStaging
    Properties:
      Bucket: !Ref PerformanceSplunkDeliveryFailureBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Resource:
              - !GetAtt PerformanceSplunkDeliveryFailureBucket.Arn
              - !Sub '${PerformanceSplunkDeliveryFailureBucket.Arn}/*'
            Principal:
              AWS: "{{resolve:ssm:CSLSS3LambdaARN}}"
            Action:
              - 's3:Get*'
              - 's3:List*'

  PerformanceSplunkDeliveryFailureBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-perf-splunk-fail"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/performance-splunk-delivery-failure-bucket/"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRedundantFiles
            Status: Enabled
            ExpirationInDays: 7
      NotificationConfiguration:
        QueueConfigurations:
          !If
          - IsProductionOrStaging
          - - Event: "s3:ObjectCreated:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
            - Event: "s3:ObjectRestore:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
          - - !Ref AWS::NoValue
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  PerformanceSplunkDeliveryTestBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployTestRolePolicy
    Properties:
      Bucket: !Ref PerformanceSplunkDeliveryTestBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Resource:
              - !GetAtt PerformanceSplunkDeliveryTestBucket.Arn
              - !Sub '${PerformanceSplunkDeliveryTestBucket.Arn}/*'
            Principal:
              AWS: !Ref TestRoleArn
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:DeleteObject'

  PerformanceSplunkDeliveryTestBucket:
    Type: AWS::S3::Bucket
    Condition: IsBuildOrDev
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-perf-splunk-test"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/performance-splunk-delivery-test-bucket/"

  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/firehose"
      RetentionInDays: 7

  FraudFirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "fraud"

  PerformanceFirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "performance"

  FraudDeliveryFirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "fraud/deliveries"

  PerformanceDeliveryFirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "performance/deliveries"

  FraudDeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'

  FraudDeliveryStreamPolicy:
    DependsOn:
      - FraudDeliveryStreamRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref FraudDeliveryStreamRole
      PolicyName: fraud_firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt FraudSplunkDeliveryFailureBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FraudSplunkDeliveryFailureBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'firehose:DescribeDeliveryStream'
              - 'firehose:ListDeliveryStreams'
              - 'firehose:ListTagsForDeliveryStream'
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !GetAtt FraudDeliveryStream.Arn
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${ObfuscationFunction.Arn}*"
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
              - 'logs:CreateLogStream'
            Resource:
              - '*'

  FraudDeliveryStreamTestPolicy:
    DependsOn:
      - FraudDeliveryStreamRole
    Type: AWS::IAM::Policy
    Condition: IsBuildOrDev
    Properties:
      Roles:
        - !Ref FraudDeliveryStreamRole
      PolicyName: fraud_firehose_delivery_test_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt FraudSplunkDeliveryTestBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FraudSplunkDeliveryTestBucket
                  - '*'

  PerformanceDeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - 'firehose.amazonaws.com'
            Action: 'sts:AssumeRole'

  PerformanceStreamPolicy:
    DependsOn:
      - PerformanceDeliveryStreamRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref PerformanceDeliveryStreamRole
      PolicyName: performance_firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt PerformanceSplunkDeliveryFailureBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PerformanceSplunkDeliveryFailureBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'firehose:DescribeDeliveryStream'
              - 'firehose:ListDeliveryStreams'
              - 'firehose:ListTagsForDeliveryStream'
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !GetAtt PerformanceDeliveryStream.Arn
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${CleanserFunction.Arn}*"
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
              - 'logs:CreateLogStream'
            Resource:
              - '*'

  PerformanceDeliveryStreamTestPolicy:
    DependsOn:
      - PerformanceDeliveryStreamRole
    Type: AWS::IAM::Policy
    Condition: IsBuildOrDev
    Properties:
      Roles:
        - !Ref PerformanceDeliveryStreamRole
      PolicyName: performance_firehose_delivery_test_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt PerformanceSplunkDeliveryTestBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PerformanceSplunkDeliveryTestBucket
                  - '*'

  FireHoseSNSSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sns_kinesis_firehose_access_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'firehose:DescribeDeliveryStream'
                  - 'firehose:ListDeliveryStreams'
                  - 'firehose:ListTagsForDeliveryStream'
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Effect: Allow
                Resource:
                  - !GetAtt FraudDeliveryStream.Arn
                  - !GetAtt PerformanceDeliveryStream.Arn

  FraudDeliveryStream:
    DependsOn:
      - FraudDeliveryStreamRole
      - FraudFirehoseLogStream
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "FraudFireHose-${Environment}"
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt FireHoseKMSKey.Arn
        KeyType: "CUSTOMER_MANAGED_CMK"
      SplunkDestinationConfiguration:
        Fn::If:
          - IsProductionOrStaging
          -
            HECAcknowledgmentTimeoutInSeconds: 300
            HECEndpoint: "{{resolve:ssm:HECEndpoint}}"
            HECEndpointType: Raw
            HECToken: "{{resolve:ssm:HECTICFToken}}"
            RetryOptions:
              DurationInSeconds: 7200
            CloudWatchLoggingOptions:
              Enabled: true
              LogGroupName: !Ref FirehoseLogGroup
              LogStreamName: !Ref FraudDeliveryFirehoseLogStream
            S3BackupMode: "FailedEventsOnly"
            S3Configuration:
              BucketARN: !GetAtt FraudSplunkDeliveryFailureBucket.Arn
              BufferingHints:
                IntervalInSeconds: 900
                SizeInMBs: 128
              CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Ref FirehoseLogGroup
                LogStreamName: !Ref FraudFirehoseLogStream
              CompressionFormat: GZIP
              ErrorOutputPrefix: "FraudDeliveryErrors"
              RoleARN: !GetAtt FraudDeliveryStreamRole.Arn
            ProcessingConfiguration:
              Enabled: true
              Processors:
                - Type: Lambda
                  Parameters:
                    - ParameterName: LambdaArn
                      ParameterValue: !GetAtt ObfuscationFunction.Arn
                    - ParameterName: RoleArn
                      ParameterValue: !GetAtt FraudDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"
      ExtendedS3DestinationConfiguration:
        Fn::If:
          - IsBuildOrDev
          -
            Prefix: "firehose/"
            BucketARN: !GetAtt FraudSplunkDeliveryTestBucket.Arn
            BufferingHints:
              IntervalInSeconds: 60
              SizeInMBs: 128
            CompressionFormat: "GZIP"
            RoleARN: !GetAtt FraudDeliveryStreamRole.Arn
            CloudWatchLoggingOptions:
              Enabled: true
              LogGroupName: !Ref FirehoseLogGroup
              LogStreamName: !Ref FraudFirehoseLogStream
            ProcessingConfiguration:
              Enabled: true
              Processors:
                - Type: Lambda
                  Parameters:
                    - ParameterName: LambdaArn
                      ParameterValue: !GetAtt ObfuscationFunction.Arn
                    - ParameterName: RoleArn
                      ParameterValue: !GetAtt FraudDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"

  PerformanceDeliveryStream:
    DependsOn:
      - PerformanceDeliveryStreamRole
      - PerformanceFirehoseLogStream
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "PerformanceFireHose-${Environment}"
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt FireHoseKMSKey.Arn
        KeyType: "CUSTOMER_MANAGED_CMK"
      SplunkDestinationConfiguration:
        Fn::If:
          - IsProductionOrStaging
          -
            HECAcknowledgmentTimeoutInSeconds: 300
            HECEndpoint: "{{resolve:ssm:HECEndpoint}}"
            HECEndpointType: Raw
            HECToken: "{{resolve:ssm:HECPerformanceToken}}"
            RetryOptions:
              DurationInSeconds: 7200
            CloudWatchLoggingOptions:
              Enabled: true
              LogGroupName: !Ref FirehoseLogGroup
              LogStreamName: !Ref PerformanceDeliveryFirehoseLogStream
            S3BackupMode: "FailedEventsOnly"
            S3Configuration:
              BucketARN: !GetAtt PerformanceSplunkDeliveryFailureBucket.Arn
              BufferingHints:
                IntervalInSeconds: 900
                SizeInMBs: 128
              CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Ref FirehoseLogGroup
                LogStreamName: !Ref PerformanceFirehoseLogStream
              CompressionFormat: GZIP
              ErrorOutputPrefix: "PerformanceDeliveryErrors"
              RoleARN: !GetAtt PerformanceDeliveryStreamRole.Arn
            ProcessingConfiguration:
              Enabled: true
              Processors:
                - Type: Lambda
                  Parameters:
                    - ParameterName: LambdaArn
                      ParameterValue: !GetAtt CleanserFunction.Arn
                    - ParameterName: RoleArn
                      ParameterValue: !GetAtt PerformanceDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"
      ExtendedS3DestinationConfiguration:
        Fn::If:
          - IsBuildOrDev
          -
            Prefix: "firehose/"
            BucketARN: !GetAtt PerformanceSplunkDeliveryTestBucket.Arn
            BufferingHints:
              IntervalInSeconds: 60
              SizeInMBs: 128
            CompressionFormat: "GZIP"
            RoleARN: !GetAtt PerformanceDeliveryStreamRole.Arn
            CloudWatchLoggingOptions:
              Enabled: true
              LogGroupName: !Ref FirehoseLogGroup
              LogStreamName: !Ref PerformanceFirehoseLogStream
            ProcessingConfiguration:
              Enabled: true
              Processors:
                - Type: Lambda
                  Parameters:
                    - ParameterName: LambdaArn
                      ParameterValue: !GetAtt CleanserFunction.Arn
                    - ParameterName: RoleArn
                      ParameterValue: !GetAtt PerformanceDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"

  FraudDeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref epSNSTopic
      Endpoint: !GetAtt FraudDeliveryStream.Arn #FireHose
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt FireHoseSNSSubscriptionRole.Arn
      FilterPolicy:
        eventName:
          - AUTH_IPV_CAPACITY_REQUESTED
          - AUTH_IPV_AUTHORISATION_REQUESTED
          - IPV_JOURNEY_START
          - IPV_REDIRECT_TO_CRI
          - IPV_PASSPORT_CRI_START
          - IPV_PASSPORT_CRI_RESPONSE_RECEIVED
          - IPV_PASSPORT_CRI_REQUEST_SENT
          - IPV_PASSPORT_CRI_END
          - IPV_PASSPORT_CRI_VC_ISSUED
          - IPV_ADDRESS_CRI_START
          - IPV_ADDRESS_CRI_REQUEST_SENT
          - IPV_ADDRESS_CRI_VC_ISSUED
          - IPV_ADDRESS_CRI_END
          - IPV_FRAUD_CRI_START
          - IPV_FRAUD_CRI_REQUEST_SENT
          - IPV_FRAUD_CRI_VC_ISSUED
          - IPV_FRAUD_CRI_THIRD_PARTY_REQUEST_ENDED
          - IPV_FRAUD_CRI_END
          - IPV_KBV_CRI_START
          - IPV_KBV_CRI_REQUEST_SENT
          - IPV_KBV_CRI_VC_ISSUED
          - IPV_KBV_CRI_THIRD_PARTY_REQUEST_ENDED
          - IPV_KBV_CRI_END
          - IPV_CRI_AUTH_RESPONSE_RECEIVED
          - IPV_VC_RECEIVED
          - IPV_JOURNEY_END
          - IPV_IDENTITY_ISSUED
          - IPV_CONTRA_INDICATOR_STORAGE_GET_START
          - IPV_CONTRA_INDICATOR_STORAGE_GET_QUERY
          - IPV_CONTRA_INDICATOR_STORAGE_GET_END
          - IPV_CONTRA_INDICATOR_STORAGE_PUT_START
          - IPV_CONTRA_INDICATOR_STORAGE_PUT_NEW_CIS
          - IPV_CONTRA_INDICATOR_STORAGE_PUT_END
          - AUTH_PROCESSING_IDENTITY_REQUEST
          - AUTH_IPV_AUTHORISATION_RESPONSE_RECEIVED
          - AUTH_IPV_SUCCESSFUL_IDENTITY_RESPONSE_RECEIVED
          - AUTH_IPV_SUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_IPV_UNSUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_IPV_SPOT_REQUESTED
          - IPV_SPOT_REQUEST_RECEIVED
          - IPV_SPOT_RESPONSE_APPROVED
          - IPV_SPOT_RESPONSE_REJECTED
          - AUTH_IPV_SUCCESSFUL_SPOT_RESPONSE_RECEIVED
          - AUTH_IPV_UNSUCCESSFUL_SPOT_RESPONSE_RECEIVED
          - AUTH_AUTHORISATION_REQUEST_ERROR
          - AUTH_AUTHORISATION_INITIATED
          - AUTH_AUTHORISATION_REQUEST_RECEIVED
          - AUTH_AUTH_CODE_ISSUED
          - AUTH_LOG_OUT_SUCCESS
          - AUTH_USER_INFO_RETURNED
          - AUTH_ACCOUNT_TEMPORARILY_LOCKED
          - AUTH_INVALID_CREDENTIALS
          - AUTH_NO_ACCOUNT_WITH_EMAIL
          - AUTH_CODE_MAX_RETRIES_REACHED
          - AUTH_INVALID_CODE_SENT
          - AUTH_CODE_VERIFIED
          - AUTH_PASSWORD_RESET_REQUESTED
          - AUTH_PASSWORD_RESET_SUCCESSFUL
          - AUTH_LOG_IN_SUCCESS
          - AUTH_CHECK_USER_INVALID_EMAIL
          - AUTH_CHECK_USER_NO_ACCOUNT_WITH_EMAIL
          - AUTH_CHECK_USER_KNOWN_EMAIL
          - AUTH_CREATE_ACCOUNT_EMAIL_ALREADY_EXISTS
          - AUTH_CREATE_ACCOUNT
          - AUTH_START_INFO_FOUND
          - AUTH_UPDATE_PROFILE_REQUEST_RECEIVED
          - AUTH_UPDATE_PROFILE_REQUEST_ERROR
          - AUTH_UPDATE_PROFILE_PHONE_NUMBER
          - AUTH_UPDATE_PROFILE_CONSENT_UPDATED
          - AUTH_UPDATE_PROFILE_TERMS_CONDS_ACCEPTANCE
          - AUTH_UPDATE_PROFILE_AUTH_APP
          - AUTH_MFA_INVALID_CODE_REQUEST
          - AUTH_MFA_MISMATCHED_EMAIL
          - AUTH_MFA_MISSING_PHONE_NUMBER
          - AUTH_MFA_CODE_SENT
          - AUTH_MFA_CODE_SENT_FOR_TEST_CLIENT
          - AUTH_UPDATE_EMAIL
          - AUTH_UPDATE_PASSWORD
          - AUTH_UPDATE_PHONE_NUMBER
          - AUTH_ACCOUNT_MANAGEMENT_AUTHENTICATE
          - AUTH_DELETE_ACCOUNT
          - AUTH_SEND_OTP
          - AUTH_REGISTER_CLIENT_REQUEST_RECEIVED
          - AUTH_REGISTER_CLIENT_REQUEST_ERROR
          - AUTH_UPDATE_CLIENT_REQUEST_RECEIVED
          - AUTH_UPDATE_CLIENT_REQUEST_ERROR
          - AUTH_DOC_APP_AUTHORISATION_REQUESTED
          - AUTH_DOC_APP_AUTHORISATION_RESPONSE_RECEIVED
          - AUTH_DOC_APP_SUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_DOC_APP_UNSUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_DOC_APP_SUCCESSFUL_CREDENTIAL_RESPONSE_RECEIVED
          - AUTH_DOC_APP_UNSUCCESSFUL_CREDENTIAL_RESPONSE_RECEIVED
          - DCMAW_CRI_START
          - DCMAW_CRI_VC_ISSUED
          - DCMAW_CRI_END
          - DCMAW_CRI_ABORT
          - DCMAW_CRI_4XXERROR
          - DCMAW_CRI_5XXERROR

  PerformanceDeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref epSNSTopic
      Endpoint: !GetAtt PerformanceDeliveryStream.Arn #FireHose
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt FireHoseSNSSubscriptionRole.Arn
      FilterPolicy:
        eventName:
          - AUTH_IPV_CAPACITY_REQUESTED
          - AUTH_IPV_AUTHORISATION_REQUESTED
          - IPV_JOURNEY_START
          - IPV_REDIRECT_TO_CRI
          - IPV_PASSPORT_CRI_START
          - IPV_PASSPORT_CRI_RESPONSE_RECEIVED
          - IPV_PASSPORT_CRI_REQUEST_SENT
          - IPV_PASSPORT_CRI_END
          - IPV_PASSPORT_CRI_VC_ISSUED
          - IPV_ADDRESS_CRI_START
          - IPV_ADDRESS_CRI_REQUEST_SENT
          - IPV_ADDRESS_CRI_VC_ISSUED
          - IPV_ADDRESS_CRI_END
          - IPV_FRAUD_CRI_START
          - IPV_FRAUD_CRI_REQUEST_SENT
          - IPV_FRAUD_CRI_VC_ISSUED
          - IPV_FRAUD_CRI_THIRD_PARTY_REQUEST_ENDED
          - IPV_FRAUD_CRI_END
          - IPV_KBV_CRI_START
          - IPV_KBV_CRI_REQUEST_SENT
          - IPV_KBV_CRI_VC_ISSUED
          - IPV_KBV_CRI_THIRD_PARTY_REQUEST_ENDED
          - IPV_KBV_CRI_END
          - IPV_CRI_AUTH_RESPONSE_RECEIVED
          - IPV_VC_RECEIVED
          - IPV_JOURNEY_END
          - IPV_IDENTITY_ISSUED
          - IPV_CONTRA_INDICATOR_STORAGE_GET_START
          - IPV_CONTRA_INDICATOR_STORAGE_GET_QUERY
          - IPV_CONTRA_INDICATOR_STORAGE_GET_END
          - IPV_CONTRA_INDICATOR_STORAGE_PUT_START
          - IPV_CONTRA_INDICATOR_STORAGE_PUT_NEW_CIS
          - IPV_CONTRA_INDICATOR_STORAGE_PUT_END
          - AUTH_PROCESSING_IDENTITY_REQUEST
          - AUTH_IPV_AUTHORISATION_RESPONSE_RECEIVED
          - AUTH_IPV_SUCCESSFUL_IDENTITY_RESPONSE_RECEIVED
          - AUTH_IPV_SUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_IPV_UNSUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_IPV_SPOT_REQUESTED
          - IPV_SPOT_REQUEST_RECEIVED
          - IPV_SPOT_RESPONSE_APPROVED
          - IPV_SPOT_RESPONSE_REJECTED
          - AUTH_IPV_SUCCESSFUL_SPOT_RESPONSE_RECEIVED
          - AUTH_IPV_UNSUCCESSFUL_SPOT_RESPONSE_RECEIVED
          - AUTH_AUTHORISATION_REQUEST_ERROR
          - AUTH_AUTHORISATION_INITIATED
          - AUTH_AUTHORISATION_REQUEST_RECEIVED
          - AUTH_AUTH_CODE_ISSUED
          - AUTH_LOG_OUT_SUCCESS
          - AUTH_USER_INFO_RETURNED
          - AUTH_ACCOUNT_TEMPORARILY_LOCKED
          - AUTH_INVALID_CREDENTIALS
          - AUTH_NO_ACCOUNT_WITH_EMAIL
          - AUTH_CODE_MAX_RETRIES_REACHED
          - AUTH_INVALID_CODE_SENT
          - AUTH_CODE_VERIFIED
          - AUTH_PASSWORD_RESET_REQUESTED
          - AUTH_PASSWORD_RESET_SUCCESSFUL
          - AUTH_LOG_IN_SUCCESS
          - AUTH_CHECK_USER_INVALID_EMAIL
          - AUTH_CHECK_USER_NO_ACCOUNT_WITH_EMAIL
          - AUTH_CHECK_USER_KNOWN_EMAIL
          - AUTH_CREATE_ACCOUNT_EMAIL_ALREADY_EXISTS
          - AUTH_CREATE_ACCOUNT
          - AUTH_START_INFO_FOUND
          - AUTH_UPDATE_PROFILE_REQUEST_RECEIVED
          - AUTH_UPDATE_PROFILE_REQUEST_ERROR
          - AUTH_UPDATE_PROFILE_PHONE_NUMBER
          - AUTH_UPDATE_PROFILE_CONSENT_UPDATED
          - AUTH_UPDATE_PROFILE_TERMS_CONDS_ACCEPTANCE
          - AUTH_UPDATE_PROFILE_AUTH_APP
          - AUTH_MFA_INVALID_CODE_REQUEST
          - AUTH_MFA_MISMATCHED_EMAIL
          - AUTH_MFA_MISSING_PHONE_NUMBER
          - AUTH_MFA_CODE_SENT
          - AUTH_MFA_CODE_SENT_FOR_TEST_CLIENT
          - AUTH_UPDATE_EMAIL
          - AUTH_UPDATE_PASSWORD
          - AUTH_UPDATE_PHONE_NUMBER
          - AUTH_ACCOUNT_MANAGEMENT_AUTHENTICATE
          - AUTH_DELETE_ACCOUNT
          - AUTH_SEND_OTP
          - AUTH_REGISTER_CLIENT_REQUEST_RECEIVED
          - AUTH_REGISTER_CLIENT_REQUEST_ERROR
          - AUTH_UPDATE_CLIENT_REQUEST_RECEIVED
          - AUTH_UPDATE_CLIENT_REQUEST_ERROR
          - AUTH_DOC_APP_AUTHORISATION_REQUESTED
          - AUTH_DOC_APP_AUTHORISATION_RESPONSE_RECEIVED
          - AUTH_DOC_APP_SUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_DOC_APP_UNSUCCESSFUL_TOKEN_RESPONSE_RECEIVED
          - AUTH_DOC_APP_SUCCESSFUL_CREDENTIAL_RESPONSE_RECEIVED
          - AUTH_DOC_APP_UNSUCCESSFUL_CREDENTIAL_RESPONSE_RECEIVED
          - DCMAW_CRI_START
          - DCMAW_CRI_VC_ISSUED
          - DCMAW_CRI_END
          - DCMAW_CRI_ABORT
          - DCMAW_CRI_4XXERROR
          - DCMAW_CRI_5XXERROR

  ObfuscationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"

  ObfuscationHmacKmsPolicy:
    DependsOn:
      - ObfuscationFunctionRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref ObfuscationFunctionRole
      PolicyName: hmac_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource: "{{resolve:ssm:HMACKeyKMSKeyArn}}"

  ObfuscationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/ObfuscationFunction"
      RetentionInDays: 7

  ObfuscationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "ObfuscationFunction"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: obfuscation-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt ObfuscationFunctionRole.Arn
      Environment:
        Variables:
          SECRET_ARN: "{{resolve:ssm:HMACSecretArn}}"
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - obfuscation-app.ts

  HMACSecretAuthAccessPolicy:
    DependsOn:
      - ObfuscationFunctionRole
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      BlockPublicPolicy: True
      SecretId: "{{resolve:ssm:HMACSecretArn}}"
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - !If
            - IsProductionOrStaging
            -
              Effect: "Allow"
              Principal:
                AWS: "{{resolve:ssm:AuthAccountARN}}"
              Action: "secretsmanager:GetSecretValue"
              Resource: "{{resolve:ssm:HMACSecretArn}}"
            - !Ref "AWS::NoValue"
          - Resource: "{{resolve:ssm:HMACSecretArn}}"
            Action: "secretsmanager:GetSecretValue"
            Effect: Allow
            Principal:
              AWS: !GetAtt ObfuscationFunctionRole.Arn

  CleanserFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"

  CleanserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/CleanserFunction"
      RetentionInDays: 7

  CleanserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "CleanserFunction"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: cleanser-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt CleanserFunctionRole.Arn
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - cleanser-app.ts

  ReIngestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/ReIngest"
      RetentionInDays: 7

  ReIngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "ReIngestFunction"
      CodeUri: ../event-processing/lambda
      PackageType: Zip
      Handler: re-ingest-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      Environment:
        Variables:
          performanceBucketName: !Sub "${AWS::StackName}-${Environment}-perf-splunk-fail"
          fraudBucketName: !Sub "${AWS::StackName}-${Environment}-fraud-splunk-fail"
          performanceStreamName: !Sub "PerformanceFireHose-${Environment}"
          fraudStreamName: !Sub "FraudFireHose-${Environment}"
          maxIngestion: "5"
      Events:
        FraudBucket:
          Type: S3
          Properties:
            Bucket: !Ref FraudSplunkDeliveryFailureBucket
            Events: 's3:ObjectCreated:*'
        PerformanceBucket:
          Type: S3
          Properties:
            Bucket: !Ref PerformanceSplunkDeliveryFailureBucket
            Events: 's3:ObjectCreated:*'
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${Environment}-fraud-splunk-fail"
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${Environment}-perf-splunk-fail"
        - FirehoseWritePolicy:
            DeliveryStreamName: !Sub "FraudFireHose-${Environment}"
        - FirehoseWritePolicy:
            DeliveryStreamName: !Sub "PerformanceFireHose-${Environment}"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - re-ingest-app.ts

  #
  # Test Role Permissions
  #

  KBVTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KBVEventProcessorFunction
      Principal: !Ref TestRoleArn

  KBVAddressTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KBVAddressEventProcessorFunction
      Principal: !Ref TestRoleArn

  KBVFraudTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KBVFraudEventProcessorFunction
      Principal: !Ref TestRoleArn

  IPVTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IPVEventProcessorFunction
      Principal: !Ref TestRoleArn

  IPVPassTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IPVPassEventProcessorFunction
      Principal: !Ref TestRoleArn

  IPVCITestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IPVCIEventProcessorFunction
      Principal: !Ref TestRoleArn

  SPOTTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SPOTEventProcessorFunction
      Principal: !Ref TestRoleArn

  AppTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AppEventProcessorFunction
      Principal: !Ref TestRoleArn

  AuthOIDCTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthOIDCEventProcessorFunction
      Principal: !Ref TestRoleArn

  AuthAccountMgmtTestInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthAccountMgmtEventProcessorFunction
      Principal: !Ref TestRoleArn

  #
  # CSLS
  #

  CSLSKBVLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "KBVEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSKBVAddressLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "KBVAddressEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSKBVFraudLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "KBVFraudEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSIPVLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "IPVEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSIPVPassLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "IPVPassEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSIPVCILogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "IPVCIEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSSPOTLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "SPOTEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSAppLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "AppEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSAuthOIDCLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "AuthOIDCEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSAuthAccountMgmtLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "AuthAccountMgmtEventProcessorLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSFireHoseLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "FirehoseLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSObfuscationLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "ObfuscationLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSCleanserFunctionLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "CleanserLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"
