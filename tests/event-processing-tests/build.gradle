plugins {
    id 'java'
    id "io.qameta.allure" version "2.10.0"
}

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.cucumber:cucumber-java:7.2.3'
    implementation platform('software.amazon.awssdk:bom:2.17.179')
    implementation 'software.amazon.awssdk:lambda'
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:cloudwatchlogs'
    implementation 'software.amazon.awssdk:cloudwatch'
    implementation 'org.json:json:20171018'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.3.4'
    testImplementation 'org.junit.platform:junit-platform-suite:1.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'io.qameta.allure:allure-maven:2.11.2'
    implementation group: 'io.qameta.allure', name: 'allure-cucumber7-jvm', version: '2.18.1'
    implementation 'com.github.automatedowl:allure-environment-writer:1.0.0'
}

task cucumber(type: Test) {
    useJUnitPlatform ()
    systemProperty("cucumber.execution.parallel.enabled", true)
    systemProperty("cucumber.junit-platform.naming-strategy", "long")
    systemProperty("cucumber.plugin", "pretty, json:"+System.getenv("TEST_REPORT_ABSOLUTE_DIR")+"/result.json, junit:"+System.getenv("TEST_REPORT_ABSOLUTE_DIR")+"/result.xml")
    systemProperty("cucumber.filter.tags", "@"+System.getenv("TEST_ENVIRONMENT"))
}

task cleanup(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('uk.gov.di.txma.eventprocessor.Cleanup')
}

cleanup.configure {
    mustRunAfter cucumber
}

tasks {
    test {
        dependsOn assemble, testClasses, cucumber
        if (System.getenv("TEST_ENVIRONMENT") != "staging"){
            dependsOn cleanup
        }
    }
}
