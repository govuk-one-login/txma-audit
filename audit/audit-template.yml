AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "A template to create all the Audit infrastructure."

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  TestRoleArn:
    Type: "String"
    Description: "The ARN of the role that will used for integration tests"
    Default: "none"
    AllowedPattern: "(none)|(arn:aws:iam::.*:role/.*)"

Conditions:
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, "none" ] ]
  UseCodeSigning: !Not [ !Equals [ !Ref CodeSigningConfigArn, "none" ] ]
  UseTestRole: !Not [ !Equals [ !Ref TestRoleArn, "none" ]]
  IsProductionOrStaging: !And
    - !Not [!Equals [ !Ref Environment, dev]]
    - !Not [!Equals [ !Ref Environment, build]]
  IsPipelineTestStage: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
  IsTestableEnv: !Or
    - !Condition IsPipelineTestStage
    - !Equals [ !Ref Environment, dev ]
  DeployTestRolePolicy: !And
    - !Condition IsPipelineTestStage
    - !Condition UseTestRole
  DeployMessageBucketPolicy: !Or
    - !Condition DeployTestRolePolicy
    - !Condition IsProductionOrStaging

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Architectures:
      - x86_64

Resources:
  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource:
              - "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  FireHoseKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "firehose.amazonaws.com"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'

  FireHoseKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/FireHoseKMSKey"
      TargetKeyId: !Ref FireHoseKMSKey

  MessageBucketLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: "Enabled"
      BucketName: !Sub "${AWS::StackName}-${Environment}-bucket-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  S3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MessageBucketLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${MessageBucketLogsBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  MessageBatchBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-message-batch"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Enabled"
      LoggingConfiguration:
        DestinationBucketName: !Ref MessageBucketLogsBucket
        LogFilePrefix: "audit/message-batch-bucket/"
      LifecycleConfiguration:
        Rules:
          - Id: AuditGlacierRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
      NotificationConfiguration:
        QueueConfigurations:
          !If
          - IsProductionOrStaging
          - - Event: "s3:ObjectCreated:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
            - Event: "s3:ObjectRestore:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
          - - !Ref AWS::NoValue
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      MetricsConfigurations:
        - Id: EntireBucket

  MessageBatchBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployMessageBucketPolicy
    Properties:
      Bucket: !Ref MessageBatchBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - !If
            - DeployTestRolePolicy
            - Effect: 'Allow'
              Resource:
                - !GetAtt MessageBatchBucket.Arn
                - !Sub '${MessageBatchBucket.Arn}/*'
              Principal:
                AWS: !Ref TestRoleArn
              Action:
                - 's3:GetObject'
                - 's3:ListBucket'
            - !Ref AWS::NoValue
          - !If
            - IsProductionOrStaging
            - Effect: 'Allow'
              Resource:
                - !GetAtt MessageBatchBucket.Arn
                - !Sub '${MessageBatchBucket.Arn}/*'
              Principal:
                AWS: "{{resolve:ssm:CSLSS3LambdaARN}}"
              Action:
                - 's3:Get*'
                - 's3:List*'
            - !Ref AWS::NoValue

  S3NoReceivedObjectsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Audit S3 Received No Objects Alarm"
      AlarmName: "S3NoReceivedObjectsAlarmAlarm"
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      Statistic: Maximum
      Period: 86400
      Threshold: 1
      TreatMissingData: breaching
      MetricName: "PutRequests"
      Namespace: "AWS/S3"
      Dimensions:
      - Name: BucketName
        Value: !Ref MessageBatchBucket
      - Name: FilterId
        Value: EntireBucket

  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/firehose"
      RetentionInDays: 7

  FirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "audit"

  AuditDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      DeliveryStreamName: !Sub
        - "AuditFireHose-${EnvironmentName}"
        - EnvironmentName: !Ref Environment
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt FireHoseKMSKey.Arn
        KeyType: "CUSTOMER_MANAGED_CMK"
      ExtendedS3DestinationConfiguration:
        Prefix: "firehose/"
        BucketARN: !GetAtt MessageBatchBucket.Arn
        BufferingHints:
          IntervalInSeconds: !If
            - IsTestableEnv
            - 60
            - 900
          SizeInMBs: 128
        CompressionFormat: "GZIP"
        RoleARN: !GetAtt DeliveryStreamRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref FirehoseLogGroup
          LogStreamName: !Ref FirehoseLogStream
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt DelimiterFunction.Arn
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt DeliveryStreamRole.Arn

  DeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: '{{resolve:ssm:EventProcessorSNSTopicARN}}'
      Endpoint: !GetAtt AuditDeliveryStream.Arn #FireHose
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt SNSTopicSubscriptionRole.Arn

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'

  DeliveryStreamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeliveryStreamRole
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt MessageBatchBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref MessageBatchBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${DelimiterFunction.Arn}*"
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
              - 'logs:CreateLogStream'
            Resource:
              - '*'

  SNSTopicSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sns_kinesis_firehose_access_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:DescribeDeliveryStream'
                  - 'firehose:ListDeliveryStreams'
                  - 'firehose:ListTagsForDeliveryStream'
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource:
                  - !GetAtt AuditDeliveryStream.Arn
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                Resource: '{{resolve:ssm:SNSKMSKeyARN}}'

  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'kms:Decrypt'
            Resource: '*'

  LambdaKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LambdaKMSKey"
      TargetKeyId: !Ref LambdaKMSKey

  DelimiterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/DelimiterFunction"
      RetentionInDays: 7

  DelimiterLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-Delimiter"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"

  DelimiterFunction:
    DependsOn:
      - DelimiterLogGroup
      - DelimiterLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "DelimiterFunction"
      CodeUri: ../audit/lambda
      PackageType: Zip
      Handler: delimiter-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt DelimiterLambdaAccessRole.Arn
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - delimiter-app.ts

  firehoseTesterLambdaAccessRole:
    Type: AWS::IAM::Role
    Condition: IsTestableEnv
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-firehoseTester"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda_kinesis_firehose_PutRecord_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                Resource:
                  - !GetAtt AuditDeliveryStream.Arn

      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"

  firehoseTesterFunction:
    DependsOn:
      - firehoseTesterLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Condition: IsTestableEnv
    Properties:
      FunctionName: "firehoseTester"
      CodeUri: ../audit/lambda
      PackageType: Zip
      Handler: firehoseTester-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt firehoseTesterLambdaAccessRole.Arn
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      Environment:
        Variables:
          firehoseName: !Ref AuditDeliveryStream
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - firehoseTester-app.ts

  firehoseTesterInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref firehoseTesterFunction
      Principal: !Ref TestRoleArn

  #
  # CSLS
  #

  CSLSFireHoseLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "FirehoseLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSDelimiterLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "DelimiterLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"
