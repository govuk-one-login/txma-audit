AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "A template to create all the Audit infrastructure."

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  TestRoleArn:
    Type: "String"
    Description: "The ARN of the role that will used for integration tests"
    Default: "none"
    AllowedPattern: "(none)|(arn:aws:iam::.*:role/.*)"

Conditions:
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, "none" ] ]
  UseCodeSigning: !Not [ !Equals [ !Ref CodeSigningConfigArn, "none" ] ]
  UseTestRole: !Not [ !Equals [ !Ref TestRoleArn, "none" ]]
  IsPagerDutyEnvironment: !Or [
    !Equals [ !Ref Environment, staging ],
    !Equals [ !Ref Environment, production ]
  ]
  IsProductionOrStaging: !And
    - !Not [!Equals [ !Ref Environment, dev]]
    - !Not [!Equals [ !Ref Environment, build]]
  IsPipelineTestStage: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
  IsTestableEnv: !Or
    - !Condition IsPipelineTestStage
    - !Equals [ !Ref Environment, dev ]
  DeployTestRolePolicy: !And
    - !Condition IsPipelineTestStage
    - !Condition UseTestRole
  DeployMessageBucketPolicy: !Or
    - !Condition DeployTestRolePolicy
    - !Condition IsProductionOrStaging

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Architectures:
      - x86_64

Resources:
  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource:
              - "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  FireHoseKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "firehose.amazonaws.com"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'

  FireHoseKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/FireHoseKMSKey"
      TargetKeyId: !Ref FireHoseKMSKey

  MessageBucketLogsBucket:
    Type: AWS::S3::Bucket
    # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
    Properties:
      VersioningConfiguration:
        Status: "Enabled"
      BucketName: !Sub "${AWS::StackName}-${Environment}-bucket-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  S3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MessageBucketLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${MessageBucketLogsBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  MessageBatchBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-message-batch"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Enabled"
      LoggingConfiguration:
        DestinationBucketName: !Ref MessageBucketLogsBucket
        LogFilePrefix: "audit/message-batch-bucket/"
      LifecycleConfiguration:
        Rules:
          - Id: AuditGlacierRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
      NotificationConfiguration:
        QueueConfigurations:
          !If
          - IsProductionOrStaging
          - - Event: "s3:ObjectCreated:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
            - Event: "s3:ObjectRestore:*"
              Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
          - - !Ref AWS::NoValue
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      MetricsConfigurations:
        - Id: EntireBucket

  MessageBatchBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployMessageBucketPolicy
    Properties:
      Bucket: !Ref MessageBatchBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Deny"
            Action:
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
              - "s3:DeleteBucket"
              - "s3:DeleteBucketPolicy"
            Resource:
              - !GetAtt MessageBatchBucket.Arn
              - !Sub "${MessageBatchBucket.Arn}/*"
            Principal:
              AWS: "*"
          - !If
            - DeployTestRolePolicy
            - Effect: 'Allow'
              Resource:
                - !GetAtt MessageBatchBucket.Arn
                - !Sub '${MessageBatchBucket.Arn}/*'
              Principal:
                AWS: !Ref TestRoleArn
              Action:
                - 's3:GetObject'
                - 's3:ListBucket'
            - !Ref AWS::NoValue
          - !If
            - IsProductionOrStaging
            - Effect: 'Allow'
              Resource:
                - !GetAtt MessageBatchBucket.Arn
                - !Sub '${MessageBatchBucket.Arn}/*'
              Principal:
                AWS: "{{resolve:ssm:CSLSS3LambdaARN}}"
              Action:
                - 's3:Get*'
                - 's3:List*'
            - !Ref AWS::NoValue

  S3NoReceivedObjectsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Audit S3 Received No Objects Alarm
      AlarmName: S3NoReceivedObjectsAlarm
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 0
      TreatMissingData: breaching
      MetricName: PutRequests
      Namespace: AWS/S3
      AlarmActions:
        - !Ref SNSCriticalAlarmTopic
      Dimensions:
      - Name: BucketName
        Value: !Ref MessageBatchBucket
      - Name: FilterId
        Value: EntireBucket

  SNSCriticalAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:CoreSnsKmsKeyArn}}'
      TopicName: "PutEventAlarm"

  SNSCriticalAlarmTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - Effect: Allow
          Principal:
            Service: cloudwatch.amazonaws.com
          Action: 'sns:Publish'
          Resource: !GetAtt SNSCriticalAlarmTopic.TopicArn
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
            StringEquals:
              aws:SourceAccount: !Sub ${AWS::AccountId} 
      Topics:
        - !Ref SNSCriticalAlarmTopic

  PagerDutySubscription:
    Type: AWS::SNS::Subscription
    Condition: IsPagerDutyEnvironment
    Properties:
      TopicArn: !Ref SNSCriticalAlarmTopic
      Protocol: https
      Endpoint: '{{resolve:secretsmanager:PagerDutyEndpoint}}'

  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/firehose"
      RetentionInDays: 7

  FirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "audit"

  AuditDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      DeliveryStreamName: !Sub
        - "AuditFireHose-${EnvironmentName}"
        - EnvironmentName: !Ref Environment
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt FireHoseKMSKey.Arn
        KeyType: "CUSTOMER_MANAGED_CMK"
      ExtendedS3DestinationConfiguration:
        Prefix: "firehose/"
        BucketARN: !GetAtt MessageBatchBucket.Arn
        BufferingHints:
          IntervalInSeconds: !If
            - IsTestableEnv
            - 60
            - 900
          SizeInMBs: 128
        CompressionFormat: "GZIP"
        RoleARN: !GetAtt DeliveryStreamRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref FirehoseLogGroup
          LogStreamName: !Ref FirehoseLogStream
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt DelimiterFunction.Arn
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt DeliveryStreamRole.Arn

  DeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: '{{resolve:ssm:EventProcessorSNSTopicARN}}'
      Endpoint: !GetAtt AuditDeliveryStream.Arn #FireHose
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt SNSTopicSubscriptionRole.Arn

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'

  DeliveryStreamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeliveryStreamRole
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt MessageBatchBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref MessageBatchBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${DelimiterFunction.Arn}*"
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
              - 'logs:CreateLogStream'
            Resource:
              - '*'

  SNSTopicSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sns_kinesis_firehose_access_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:DescribeDeliveryStream'
                  - 'firehose:ListDeliveryStreams'
                  - 'firehose:ListTagsForDeliveryStream'
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource:
                  - !GetAtt AuditDeliveryStream.Arn
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                Resource: '{{resolve:ssm:SNSKMSKeyARN}}'

  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'kms:Decrypt'
            Resource: '*'

  LambdaKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LambdaKMSKey"
      TargetKeyId: !Ref LambdaKMSKey

  DelimiterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/DelimiterFunction"
      RetentionInDays: 7

  DelimiterLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-Delimiter"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"

  DelimiterFunction:
    DependsOn:
      - DelimiterLogGroup
      - DelimiterLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "DelimiterFunction"
      CodeUri: ../audit/lambda
      PackageType: Zip
      Handler: delimiter-app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt DelimiterLambdaAccessRole.Arn
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - delimiter-app.ts

  firehoseTesterLambdaAccessRole:
    Type: AWS::IAM::Role
    Condition: IsTestableEnv
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-firehoseTester"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda_kinesis_firehose_PutRecord_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                Resource:
                  - !GetAtt AuditDeliveryStream.Arn

      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"

  firehoseTesterFunction:
    DependsOn:
      - firehoseTesterLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Condition: IsTestableEnv
    Properties:
      FunctionName: "firehoseTester"
      CodeUri: ../audit/lambda
      PackageType: Zip
      Handler: firehoseTester-app.handler
      Runtime: nodejs14.x
      Timeout: 60
      Role: !GetAtt firehoseTesterLambdaAccessRole.Arn
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      Environment:
        Variables:
          firehoseName: !Ref AuditDeliveryStream
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - firehoseTester-app.ts

  firehoseTesterInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DeployTestRolePolicy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref firehoseTesterFunction
      Principal: !Ref TestRoleArn

  #
  # txma2 specific resources
  #

  # separate message batch bucket so txma2 and txma tests remain isolated and can run concurrently
  MessageBatchBucketTxMA2:
    Type: AWS::S3::Bucket
    Condition: IsTestableEnv
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-message-batch-txma2"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Enabled"
      LoggingConfiguration:
        DestinationBucketName: !Ref MessageBucketLogsBucket
        LogFilePrefix: "audit/txma2-message-batch-bucket/"
      LifecycleConfiguration:
        Rules:
          - Id: AuditGlacierRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
          - Id: DeleteAutoTestObjects
            Status: Enabled
            ExpirationInDays: 1
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
            TagFilters:
              - Key: autoTest
                Value: 'true'
      # NotificationConfiguration:
      #   QueueConfigurations:
      #     !If
      #     - IsProductionOrStaging
      #     - - Event: "s3:ObjectCreated:*"
      #         Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
      #       - Event: "s3:ObjectRestore:*"
      #         Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
      #     - - !Ref AWS::NoValue
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      MetricsConfigurations:
        - Id: EntireBucket

  # Resources for revised encryption cycle

  TemporaryMessageBatchBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-temporary-message-batch"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Enabled"
      LoggingConfiguration:
        DestinationBucketName: !Ref TemporaryMessageBucketLogsBucket
        LogFilePrefix: "audit/temporary-message-batch-bucket/"
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt InitiateCopyTemporaryToPermanentQueue.Arn
      #       - Event: "s3:ObjectRestore:*"
      #         Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
      #     - - !Ref AWS::NoValue
      # OwnershipControls:
      #   Rules:
      #     - ObjectOwnership: BucketOwnerPreferred
      # MetricsConfigurations:
      #   - Id: EntireBucket

  TemporaryMessageBucketLogsBucket:
    Type: AWS::S3::Bucket
    # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
    Properties:
      VersioningConfiguration:
        Status: "Enabled"
      BucketName: !Sub "${AWS::StackName}-${Environment}-temporary-bucket-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  TemporaryS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemporaryMessageBucketLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${TemporaryMessageBucketLogsBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  TemporaryMessageBatchBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployMessageBucketPolicy
    Properties:
      Bucket: !Ref TemporaryMessageBatchBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Deny"
            Action:
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
              - "s3:DeleteBucket"
              - "s3:DeleteBucketPolicy"
            Resource:
              - !GetAtt TemporaryMessageBatchBucket.Arn
              - !Sub "${TemporaryMessageBatchBucket.Arn}/*"
            Principal:
              AWS: "*"
          - !If
            - DeployTestRolePolicy
            - Effect: 'Allow'
              Resource:
                - !GetAtt TemporaryMessageBatchBucket.Arn
                - !Sub '${TemporaryMessageBatchBucket.Arn}/*'
              Principal:
                AWS: !Ref TestRoleArn
              Action:
                - 's3:GetObject'
                - 's3:ListBucket'
            - !Ref AWS::NoValue
          - !If
            - IsProductionOrStaging
            - Effect: 'Allow'
              Resource:
                - !GetAtt TemporaryMessageBatchBucket.Arn
                - !Sub '${TemporaryMessageBatchBucket.Arn}/*'
              Principal:
                AWS: "{{resolve:ssm:CSLSS3LambdaARN}}"
              Action:
                - 's3:Get*'
                - 's3:List*'
            - !Ref AWS::NoValue
  
  # PermanentMessageBatchBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "${AWS::StackName}-${Environment}-permanent-message-batch"
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true
  #     VersioningConfiguration:
  #       Status: "Enabled"
  #     LoggingConfiguration:
  #       DestinationBucketName: !Ref PermanentMessageBucketLogsBucket
  #       LogFilePrefix: "audit/permanent-message-batch-bucket/"
  #     # NotificationConfiguration:
  #     #   QueueConfigurations:
  #     #     - Event: "s3:ObjectCreated:*"
  #     #       Queue: !GetAtt InitiateCopyTemporaryToPermanentQueue.Arn
  #           # - Event: "s3:ObjectRestore:*"
  #           #   Queue: "{{resolve:ssm:CSLSS3QueueARN}}"
  #         # - - !Ref AWS::NoValue
  #     # OwnershipControls:
  #     #   Rules:
  #     #     - ObjectOwnership: BucketOwnerPreferred
  #     # MetricsConfigurations:
  #     #   - Id: EntireBucket

  # PermanentMessageBucketLogsBucket:
  #   Type: AWS::S3::Bucket
  #   # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
  #   Properties:
  #     VersioningConfiguration:
  #       Status: "Enabled"
  #     BucketName: !Sub "${AWS::StackName}-${Environment}-permanent-bucket-logs"
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true
  #     Tags:
  #       - Key: CheckovRulesToSkip
  #         Value: CKV_AWS_18

  # PermanentS3AccessLogsBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref PermanentMessageBucketLogsBucket
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: "EnableS3Logging"
  #           Effect: "Allow"
  #           Resource:
  #             - !Sub "${PermanentMessageBucketLogsBucket.Arn}/*"
  #           Principal:
  #             Service: "logging.s3.amazonaws.com"
  #           Action:
  #             - "s3:PutObject"
  #           Condition:
  #             StringEquals:
  #               "aws:SourceAccount": !Sub "${AWS::AccountId}"

  # PermanentMessageBatchBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Condition: DeployMessageBucketPolicy
  #   Properties:
  #     Bucket: !Ref PermanentMessageBatchBucket
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Deny"
  #           Action:
  #             - "s3:DeleteObject"
  #             - "s3:DeleteObjectVersion"
  #             - "s3:DeleteBucket"
  #             - "s3:DeleteBucketPolicy"
  #           Resource:
  #             - !GetAtt PermanentMessageBatchBucket.Arn
  #             - !Sub "${PermanentMessageBatchBucket.Arn}/*"
  #           Principal:
  #             AWS: "*"
  #         - !If
  #           - DeployTestRolePolicy
  #           - Effect: 'Allow'
  #             Resource:
  #               - !GetAtt PermanentMessageBatchBucket.Arn
  #               - !Sub '${PermanentMessageBatchBucket.Arn}/*'
  #             Principal:
  #               AWS: !Ref TestRoleArn
  #             Action:
  #               - 's3:GetObject'
  #               - 's3:ListBucket'
  #           - !Ref AWS::NoValue
  #         - !If
  #           - IsProductionOrStaging
  #           - Effect: 'Allow'
  #             Resource:
  #               - !GetAtt PermanentMessageBatchBucket.Arn
  #               - !Sub '${PermanentMessageBatchBucket.Arn}/*'
  #             Principal:
  #               AWS: "{{resolve:ssm:CSLSS3LambdaARN}}"
  #             Action:
  #               - 's3:Get*'
  #               - 's3:List*'
  #           - !Ref AWS::NoValue

  CopyTemporaryToPermanentFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda/copyTemporaryToPermanent/handler.handler
      # Environment:
      #   Variables:
      #     AWS_ACCOUNT_ID: !Ref AWS::AccountId
      #     AUDIT_BUCKET_NAME: '{{resolve:ssm:MessageBatchBucketTXMA2Name}}'
      #     ANALYSIS_BUCKET_ARN: !GetAtt AnalysisBucket.Arn
      #     ANALYSIS_BUCKET_NAME: !Ref AnalysisBucket
      #     BATCH_JOB_MANIFEST_BUCKET_ARN: '{{resolve:ssm:BatchJobManifestBucketArn}}'
      #     BATCH_JOB_MANIFEST_BUCKET_NAME: '{{resolve:ssm:BatchJobManifestBucketName}}'
      #     BATCH_JOB_ROLE_ARN: !GetAtt BatchJobsRole.Arn
      #     INITIATE_ATHENA_QUERY_QUEUE_URL: !Ref InitiateAthenaQueryQueue
      #     INITIATE_DATA_REQUEST_QUEUE_URL: !Ref InitiateDataRequestQueue
      #     QUERY_REQUEST_DYNAMODB_TABLE_NAME: '{{resolve:ssm:QueryRequestTableName}}'
      #     TERMINATED_JOB_QUEUE_URL: !Ref TerminatedJobQueue
      #     ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
      #     DATABASE_TTL_HOURS: '{{resolve:ssm:DatabaseTtlHours}}'
      Events:
        InitiateCopyTemporaryToPermanentEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InitiateCopyTemporaryToPermanentQueue.Arn
            BatchSize: 1
      FunctionName: !Sub ${AWS::StackName}-copy-temporary-to-permanent
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      Policies:
        - Statement:
            - Sid: S3Read
              Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !GetAtt TemporaryMessageBatchBucket.Arn
                - '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}'
            - Sid: PermanentBucketWrite
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: 
                - !GetAtt PermanentMessageBatchBucket.Arn
                - '{{resolve:ssm:BatchJobManifestBucketArn}}/*'
            - Sid: AllowCreateS3BatchJobs
              Effect: Allow
              Action:
                - s3:CreateJob
              Resource: '*'
            # - Sid: AssumeBatchJobRole
            #   Effect: Allow
            #   Action:
            #     - iam:PassRole
            #   Resource: !GetAtt BatchJobsRole.Arn
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CopyTemporaryToPermanentLogs.Arn
            # - Sid: ReadSecrets
            #   Effect: Allow
            #   Action:
            #     - secretsmanager:GetSecretValue
            #   Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
            # - Sid: DecryptKmsKeys
            #   Effect: Allow
            #   Action:
            #     - kms:Decrypt
            #   Resource:
            #     - '{{resolve:ssm:SecretsKmsKeyArn}}'
            #     - '{{resolve:ssm:DatabaseKmsKeyArn}}'
            # - Sid: QueryRequestTableReadWrite
            #   Effect: Allow
            #   Action:
            #     - dynamodb:GetItem
            #     - dynamodb:PutItem
            #     - dynamodb:UpdateItem
            #   Resource: '{{resolve:ssm:QueryRequestTableArn}}'
            # - Sid: AllowSqsSend
            #   Effect: Allow
            #   Action:
            #     - sqs:SendMessage
            #   Resource:
            #     - !GetAtt InitiateAthenaQueryQueue.Arn
            #     - !GetAtt InitiateDataRequestQueue.Arn
            #     - !GetAtt TerminatedJobQueue.Arn
            # - Sid: UseSqsKmsKey
            #   Effect: Allow
            #   Action:
            #     - kms:Decrypt
            #     - kms:GenerateDataKey*
            #     - kms:ReEncrypt*
            #   Resource: '{{resolve:ssm:SqsKmsKeyArn}}'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt CopyTemporaryToPermanentDeadLetterQueue.Arn

  CopyTemporaryToPermanentLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-copy-temporary-to-permanent'
      RetentionInDays: 30

  InitiateCopyTemporaryToPermanentQueue:
    Type: AWS::SQS::Queue
    Properties:
      # KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InitiateCopyTemporaryToPermanentDeadLetterQueue.Arn
        maxReceiveCount: 5

  InitiateCopyTemporaryToPermanentDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      # KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'

  #
  # CSLS
  #

  CSLSFireHoseLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "FirehoseLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

  CSLSDelimiterLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProductionOrStaging
    Properties:
      LogGroupName:
        Ref: "DelimiterLogGroup"
      FilterPattern: ""
      DestinationArn: "{{resolve:ssm:CSLSLogsDestination}}"

Outputs:

  IPVCoreStubURL:
    Value: !ImportValue IPVCoreStubURL

  OrchestrationStubURL:
    Value: !ImportValue OrchestrationStubURL
